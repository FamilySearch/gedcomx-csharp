using Gedcomx.Model.Util;
using Gx.Common;
using Gx.Source;
using Gx.Types;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A genealogical conclusion.
    /// </remarks>
    /// <summary>
    ///  A genealogical conclusion.
    /// </summary>
    [Serializable]
    [XmlType(Namespace = "http://gedcomx.org/v1/", TypeName = "Conclusion")]
    public abstract partial class Conclusion : Gx.Links.HypermediaEnabledData, IAttributable
    {
        private string _confidence;
        private string _sortKey;
        private string _lang;
        private Gx.Common.Attribution _attribution;
        private List<Gx.Source.SourceReference> _sources;
        private Gx.Common.ResourceReference _analysis;
        private List<Gx.Common.Note> _notes;
        /// <summary>
        ///  The level of confidence the contributor has about the data.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "confidence")]
        [Newtonsoft.Json.JsonProperty("confidence")]
        public string Confidence
        {
            get
            {
                return this._confidence;
            }
            set
            {
                this._confidence = value;
            }
        }

        /// <summary>
        ///  Convenience property for treating Confidence as an enum. See Gx.Types.ConfidenceLevelQNameUtil for details on getter/setter functionality.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [Newtonsoft.Json.JsonIgnore]
        public Gx.Types.ConfidenceLevel KnownConfidence
        {
            get
            {
                return XmlQNameEnumUtil.GetEnumValue<ConfidenceLevel>(this._confidence);
            }
            set
            {
                this._confidence = XmlQNameEnumUtil.GetNameValue(value);
            }
        }
        /// <summary>
        ///  A sort key in relation to other facts for display purposes.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "sortKey")]
        [Newtonsoft.Json.JsonProperty("sortKey")]
        public string SortKey
        {
            get
            {
                return this._sortKey;
            }
            set
            {
                this._sortKey = value;
            }
        }
        /// <summary>
        ///  The language of the conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        [Newtonsoft.Json.JsonProperty("lang")]
        public string Lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }
        /// <summary>
        ///  Attribution metadata for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "attribution", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("attribution")]
        public Gx.Common.Attribution Attribution
        {
            get
            {
                return this._attribution;
            }
            set
            {
                this._attribution = value;
            }
        }
        /// <summary>
        ///  The source references for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "source", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("sources")]
        public List<Gx.Source.SourceReference> Sources
        {
            get
            {
                return this._sources;
            }
            set
            {
                this._sources = value;
            }
        }
        /// <summary>
        ///  A reference to the analysis document explaining the analysis that went into this conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "analysis", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("analysis")]
        public Gx.Common.ResourceReference Analysis
        {
            get
            {
                return this._analysis;
            }
            set
            {
                this._analysis = value;
            }
        }
        /// <summary>
        ///  Notes about a person.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "note", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("notes")]
        public List<Gx.Common.Note> Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                this._notes = value;
            }
        }

        protected internal override void Embed(ExtensibleData conclusion)
        {
            var value = (Conclusion)conclusion;
            this._lang = this._lang == null ? value._lang : this._lang;
            this._confidence = this._confidence == null ? value._confidence : this._confidence;
            this._attribution = this._attribution == null ? value._attribution : this._attribution;
            this._analysis = this._analysis == null ? value._analysis : this._analysis;
            if (value._notes != null)
            {
                this._notes = this._notes == null ? new List<Note>() : this._notes;
                this._notes.AddRange(value._notes);
            }
            if (value._sources != null)
            {
                this._sources = this._sources == null ? new List<SourceReference>() : this._sources;
                this._sources.AddRange(value._sources);
            }
            base.Embed(conclusion);
        }

        /**
         * Build up this conclusion with a lang.
         *
         * @param lang The lang.
         * @return this.
         */
        public Conclusion SetLang(String lang)
        {
            this.Lang = lang;
            return this;
        }

        /**
         * Build up this conclusion with a confidence level.
         *
         * @param confidence The confidence level.
         * @return this.
         */
        public Conclusion SetConfidence(String confidence)
        {
            Confidence = confidence;
            return this;
        }

        /**
         * Build up this conclusion with a confidence level.
         *
         * @param confidence The confidence level.
         * @return this.
         */
        public Conclusion SetConfidence(ConfidenceLevel confidence)
        {
            KnownConfidence = confidence;
            return this;
        }

        /**
         * Build up this conclusion with a source reference.
         *
         * @param source The source description being referenced.
         * @return this.
         */
        public Conclusion SetSource(SourceDescription source)
        {
            return SetSource(new SourceReference().SetDescription(source));
        }

        /**
         * Build up this conclusion with a source reference.
         *
         * @param sourceReference The source reference.
         * @return this.
         */
        public Conclusion SetSource(SourceReference sourceReference)
        {
            AddSource(sourceReference);
            return this;
        }

        /**
         * Build up this conclusion with a note.
         *
         * @param note The note.
         * @return this.
         */
        public Conclusion SetNote(Note note)
        {
            AddNote(note);
            return this;
        }

        /**
         * Build up this conclusion with attribution.
         *
         * @param attribution The attribution.
         * @return this.
         */
        public Conclusion SetAttribution(Attribution attribution)
        {
            SetAttribution(attribution);
            return this;
        }

        /**
         * Add a reference to the analysis for this conclusion.
         *
         * @param analysis The analysis.
         * @return this.
         */
        public Conclusion SetAnalysis(Document analysis)
        {
            if (analysis.Id == null)
            {
                throw new ArgumentException("Cannot reference analysis: no id.");
            }

            return SetAnalysis(new ResourceReference("#" + analysis.Id));
        }

        /**
         * Add a reference to the analysis for this conclusion.
         *
         * @param analysis The analysis.
         * @return this.
         */
        public Conclusion SetAnalysis(ResourceReference analysis)
        {
            Analysis = analysis;
            return this;
        }

        /**
         * Build up this fact with a sort key.
         *
         * @param sortKey The sort key.
         * @return this.
         */
        public Conclusion SetSortKey(String sortKey)
        {
            SortKey = sortKey;
            return this;
        }

        /**
         * Add a source reference.
         *
         * @param source The source reference to be added.
         */
        public void AddSource(SourceReference source)
        {
            if (source != null)
            {
                if (_sources == null)
                {
                    _sources = new List<SourceReference>();
                }
                _sources.Add(source);
            }
        }

        /**
         * Add a note.
         *
         * @param note The note to be added.
         */
        public void AddNote(Note note)
        {
            if (note != null)
            {
                if (_notes == null)
                {
                    _notes = new List<Note>();
                }
                _notes.Add(note);
            }
        }
    }
}
