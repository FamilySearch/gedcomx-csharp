using Gedcomx.Model.Rt;
using Gx.Common;
using Gx.Records;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Xml.Serialization;
using Newtonsoft.Json;
using System.Collections.Generic;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A concluded genealogical date.
    /// </remarks>
    /// <summary>
    ///  A concluded genealogical date.
    /// </summary>
    [Serializable]
    [XmlType(Namespace = "http://gedcomx.org/v1/", TypeName = "Date")]
    public partial class DateInfo : Gx.Common.ExtensibleData
    {

        private string _original;
        private string _formal;
        private List<Gx.Common.TextValue> _normalizedExtensions;
        private List<Gx.Records.Field> _fields;
        /// <summary>
        ///  The original text as supplied by the user.
        /// </summary>
        [XmlElement(ElementName = "original", Namespace = "http://gedcomx.org/v1/")]
        [JsonProperty("original")]
        public string Original
        {
            get
            {
                return this._original;
            }
            set
            {
                this._original = value;
            }
        }
        /// <summary>
        ///  The formal value.
        /// </summary>
        [XmlElement(ElementName = "formal", Namespace = "http://gedcomx.org/v1/")]
        [JsonProperty("formal")]
        public string Formal
        {
            get
            {
                return this._formal;
            }
            set
            {
                this._formal = value;
            }
        }
        /// <summary>
        ///  The list of normalized values for the date, provided for display purposes by the application. Normalized values
        ///  are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        [XmlElement(ElementName = "normalized", Namespace = "http://gedcomx.org/v1/")]
        [JsonProperty("normalized")]
        public List<Gx.Common.TextValue> NormalizedExtensions
        {
            get
            {
                return this._normalizedExtensions;
            }
            set
            {
                this._normalizedExtensions = value;
            }
        }
        /// <summary>
        ///  The references to the record fields being used as evidence.
        /// </summary>
        [XmlElement(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [JsonProperty("fields")]
        public List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                this._fields = value;
            }
        }

        /**
         * Add a normalized extension to the list.
         *
         * @param normalizedExtension The normalizedExtension to be added.
         */
        public void AddNormalizedExtension(TextValue normalizedExtension)
        {
            if (normalizedExtension != null)
            {
                if (_normalizedExtensions == null)
                {
                    _normalizedExtensions = new List<TextValue>();
                }
                _normalizedExtensions.Add(normalizedExtension);
            }
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitDate(this);
        }

        /**
         * Build up this date with original text as supplied by the user.
         *
         * @param original the original text.
         * @return this.
         */
        public DateInfo SetOriginal(String original)
        {
            Original = original;
            return this;
        }

        /**
         * Build up this date with a formal representation of the date.
         *
         * @param formal The formal date.
         * @return this.
         */
        public DateInfo SetFormal(String formal)
        {
            Formal = formal;
            return this;
        }

        /**
         * Build up this date with a field.
         *
         * @param field The field.
         * @return this.
         */
        public DateInfo SetField(Field field)
        {
            AddField(field);
            return this;
        }

        /**
         * Add a reference to the record field values being used as evidence.
         *
         * @param field The field to be added.
         */
        public void AddField(Field field)
        {
            if (field != null)
            {
                if (_fields == null)
                {
                    _fields = new List<Field>();
                }
                _fields.Add(field);
            }
        }
    }
}
