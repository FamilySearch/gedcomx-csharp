// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System.Collections.Generic;
using System.Linq;

using Newtonsoft.Json.Linq;

namespace Gx.Common
{

    /// <remarks>
    ///  A set of data that supports extension elements.
    /// </remarks>
    /// <summary>
    ///  A set of data that supports extension elements.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "ExtensibleData")]
    public abstract partial class ExtensibleData
    {
        private string _id;
        private List<object> _extensionElementsXml;
        private Dictionary<string, JToken> _extensionElementsJson;

        /// <summary>
        ///  A local, context-specific id for the data.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "id", DataType = "ID")]
        [Newtonsoft.Json.JsonProperty("id")]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        /// <summary>
        ///  Custom extension elements for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        [Newtonsoft.Json.JsonIgnore]
        public List<object> ExtensionElementsXml
        {
            get
            {
                return _extensionElementsXml ?? (_extensionElementsXml = new System.Collections.Generic.List<object>());
            }
            set
            {
                _extensionElementsXml = value;
            }
        }
        public bool ShouldSerializeExtensionElementsXml() => AnyExtensionElementsXml();
        public bool AnyExtensionElementsXml()
        {
            return _extensionElementsXml?.Any() ?? false;
        }

        /// <summary>
        ///  Custom extension elements for a conclusion.
        /// </summary>
        [System.Xml.Serialization.XmlIgnore]
        [Newtonsoft.Json.JsonExtensionData]
        public Dictionary<string, JToken> ExtensionElementsJson
        {
            get
            {
                return this._extensionElementsJson ?? (_extensionElementsJson = new Dictionary<string, JToken>());
            }
            set
            {
                this._extensionElementsJson = value;
            }
        }

        protected internal virtual void Embed(ExtensibleData data)
        {
            if (data._extensionElementsXml != null)
            {
                this.ExtensionElementsXml.AddRange(data._extensionElementsXml);
            }

            if (data._extensionElementsJson != null)
            {
                foreach (var element in data.ExtensionElementsJson)
                {
                    ExtensionElementsJson.Add(element.Key, element.Value);
                }
            }
        }

        /**
         * Find the extensions of a specified type.
         *
         * @param clazz The type.
         * @return The extensions, possibly empty but not null.
         */
        public List<T> FindExtensionsOfType<T>(params string[] jsonElementNames)
        {
            List<T> ext = new List<T>();
            if (this.AnyExtensionElementsXml())
            {
                foreach (object extension in ExtensionElementsXml)
                {
                    if (typeof(T).IsAssignableFrom(extension.GetType()))
                    {
                        ext.Add((T)extension);
                    }
                }
            }

            if (this._extensionElementsJson != null)
            {
                foreach (var extension in _extensionElementsJson.Where(x => jsonElementNames.Contains(x.Key)).Select(x => x.Value))
                {
                    if (extension.Type == JTokenType.Array)
                    {
                        foreach (var item in (JArray)extension)
                        {
                            ext.Add(item.ToObject<T>());
                        }
                    }
                    else
                    {
                        ext.Add(extension.ToObject<T>());
                    }
                }
            }

            return ext;
        }

        /**
         * Add an extension element.
         *
         * @param element The extension element to add.
         */
        public void AddExtensionElement(object element, string jsonElementName = null, bool forceArray = false)
        {
            if (element != null)
            {
                var elementName = jsonElementName ?? element.GetType().Name;
                this.ExtensionElementsXml.Add(element);

                if (ExtensionElementsJson.ContainsKey(elementName))
                {
                    var existing = ExtensionElementsJson[elementName].ToList();
                    existing.Add(JToken.FromObject(element));
                    ExtensionElementsJson[elementName] = new JArray(existing.ToArray());
                }
                else
                {
                    if (forceArray)
                    {
                        ExtensionElementsJson.Add(elementName, JToken.FromObject(new object[] { element }));
                    }
                    else
                    {
                        ExtensionElementsJson.Add(elementName, JToken.FromObject(element));
                    }
                }
            }
        }

        /**
         * Build up this object with an id.
         *
         * @param id The id.
         */
        public ExtensibleData SetId(string id)
        {
            this.Id = id;
            return this;
        }

    }
}
