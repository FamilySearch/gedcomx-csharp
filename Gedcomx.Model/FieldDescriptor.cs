// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;

using Gx.Common;

namespace Gx.Records
{

    /// <remarks>
    ///  A description of a field in a record.
    /// </remarks>
    /// <summary>
    ///  A description of a field in a record.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "FieldDescriptor")]
    public partial class FieldDescriptor : Gx.Links.HypermediaEnabledData
    {

        private string _originalLabel;
        private System.Collections.Generic.List<Gx.Common.TextValue> _descriptions;
        private System.Collections.Generic.List<Gx.Records.FieldValueDescriptor> _values;
        /// <summary>
        ///  The original label for the field, as stated on the original record.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "originalLabel", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("originalLabel")]
        public string OriginalLabel
        {
            get
            {
                return this._originalLabel;
            }
            set
            {
                this._originalLabel = value;
            }
        }
        /// <summary>
        ///  The description of the field.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "description", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("descriptions")]
        public System.Collections.Generic.List<Gx.Common.TextValue> Descriptions
        {
            get
            {
                return this._descriptions ?? (_descriptions = new System.Collections.Generic.List<Gx.Common.TextValue>());
            }
            set
            {
                this._descriptions = value;
            }
        }
        public bool ShouldSerializeDescriptions() => AnyDescriptions();
        public bool AnyDescriptions()
        {
            return _descriptions?.Any() ?? false;
        }
        /// <summary>
        ///  Descriptors of the values that are applicable to the field.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "value", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("values")]
        public System.Collections.Generic.List<Gx.Records.FieldValueDescriptor> Values
        {
            get
            {
                return this._values ?? (_values = new System.Collections.Generic.List<Gx.Records.FieldValueDescriptor>());
            }
            set
            {
                this._values = value;
            }
        }
        public bool ShouldSerializeValues() => AnyValues();
        public bool AnyValues()
        {
            return _values?.Any() ?? false;
        }

        /**
         * Build out this field descriptor with an original label.
         *
         * @param originalLabel The original label.
         * @return this.
         */
        public FieldDescriptor SetOriginalLabel(String originalLabel)
        {
            OriginalLabel = originalLabel;
            return this;
        }

        /**
         * Build out this descriptor with a description.
         * @param description The description.
         * @return this.
         */
        public FieldDescriptor SetDescription(TextValue description)
        {
            if (description != null)
            {
                Descriptions.Add(description);
            }
            return this;
        }

        /**
         * Build out this descriptor with a description.
         * @param description The description.
         * @return this.
         */
        public FieldDescriptor SetDescription(String description)
        {
            SetDescription(new TextValue(description));
            return this;
        }
    }
}
