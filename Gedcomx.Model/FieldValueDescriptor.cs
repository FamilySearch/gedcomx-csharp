using Gedcomx.Model.Util;
using Gx.Types;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Xml.Serialization;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.ComponentModel;

namespace Gx.Records
{

    /// <remarks>
    ///  A way a field is to be displayed to a user.
    /// </remarks>
    /// <summary>
    ///  A way a field is to be displayed to a user.
    /// </summary>
    [Serializable]
    [XmlType(Namespace = "http://gedcomx.org/v1/", TypeName = "FieldValueDescriptor")]
    public partial class FieldValueDescriptor : Gx.Links.HypermediaEnabledData
    {

        private bool? _optional;
        private bool _optionalSpecified;
        private string _type;
        private string _labelId;
        private List<Gx.Common.TextValue> _displayLabels;
        /// <summary>
        ///  Whether the treatment of the field value is optional. Used to determine whether it should be displayed even if the value is empty.
        /// </summary>
        [XmlAttribute(AttributeName = "optional")]
        [JsonProperty("optional")]
        public bool Optional
        {
            get
            {
                return this._optional.GetValueOrDefault();
            }
            set
            {
                this._optional = value;
                this._optionalSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Optional" property should be included in the output.
        /// </summary>
        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [JsonIgnore]
        public bool OptionalSpecified
        {
            get
            {
                return this._optionalSpecified;
            }
            set
            {
                this._optionalSpecified = value;
            }
        }

        /// <summary>
        ///  The type of the field value.
        /// </summary>
        [XmlAttribute(AttributeName = "type")]
        [JsonProperty("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        /// <summary>
        ///  Convenience property for treating Type as an enum. See Gx.Types.FieldValueTypeQNameUtil for details on getter/setter functionality.
        /// </summary>
        [XmlIgnore]
        [JsonIgnore]
        public Gx.Types.FieldValueType KnownType
        {
            get
            {
                return XmlQNameEnumUtil.GetEnumValue<FieldValueType>(this._type);
            }
            set
            {
                this._type = XmlQNameEnumUtil.GetNameValue(value);
            }
        }
        /// <summary>
        ///  The id of the label applicable to the field value
        /// </summary>
        [XmlAttribute(AttributeName = "labelId")]
        [JsonProperty("labelId")]
        public string LabelId
        {
            get
            {
                return this._labelId;
            }
            set
            {
                this._labelId = value;
            }
        }
        /// <summary>
        ///  The labels to be used for display purposes.
        /// </summary>
        [XmlElement(ElementName = "label", Namespace = "http://gedcomx.org/v1/")]
        [JsonProperty("labels")]
        public List<Gx.Common.TextValue> DisplayLabels
        {
            get
            {
                return this._displayLabels;
            }
            set
            {
                this._displayLabels = value;
            }
        }
    }
}
