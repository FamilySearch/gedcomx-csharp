// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;

using Gedcomx.Model.Rt;

using Gx.Common;
using Gx.Conclusion;
using Gx.Links;
using Gx.Records;
using Gx.Source;

namespace Gx
{

    /// <remarks>
    ///  <p>The GEDCOM X data formats define the serialization formats of the GEDCOM X conceptual model. The canonical documentation
    ///  is provided by the formal specification documents:</p>
    ///  
    ///  <ul>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/conceptual-model-specification.md">The GEDCOM X Conceptual Model, Version 1.0</a></li>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/json-format-specification.md">The GEDCOM X JSON Format, Version 1.0</a></li>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/xml-format-specification.md">The GEDCOM X XML Format, Version 1.0</a></li>
    ///  </ul>
    ///  
    ///  <p>This documentation is provided as a non-normative reference guide.</p>
    /// </remarks>
    /// <summary>
    ///  <p>The GEDCOM X data formats define the serialization formats of the GEDCOM X conceptual model. The canonical documentation
    ///  is provided by the formal specification documents:</p>
    ///  
    ///  <ul>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/conceptual-model-specification.md">The GEDCOM X Conceptual Model, Version 1.0</a></li>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/json-format-specification.md">The GEDCOM X JSON Format, Version 1.0</a></li>
    ///  <li><a href="https://github.com/FamilySearch/gedcomx/blob/master/specifications/xml-format-specification.md">The GEDCOM X XML Format, Version 1.0</a></li>
    ///  </ul>
    ///  
    ///  <p>This documentation is provided as a non-normative reference guide.</p>
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Gedcomx")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://gedcomx.org/v1/", ElementName = "gedcomx")]
    public partial class Gedcomx : Gx.Links.HypermediaEnabledData
    {

        private string _lang;
        private string _descriptionRef;
        private string _profile;
        private Gx.Common.Attribution _attribution;
        private System.Collections.Generic.List<Gx.Conclusion.Person> _persons;
        private System.Collections.Generic.List<Gx.Conclusion.Relationship> _relationships;
        private System.Collections.Generic.List<Gx.Source.SourceDescription> _sourceDescriptions;
        private System.Collections.Generic.List<Gx.Agent.Agent> _agents;
        private System.Collections.Generic.List<Gx.Conclusion.Event> _events;
        private System.Collections.Generic.List<Gx.Conclusion.PlaceDescription> _places;
        private System.Collections.Generic.List<Gx.Conclusion.Document> _documents;
        private System.Collections.Generic.List<Gx.Records.Collection> _collections;
        private System.Collections.Generic.List<Gx.Records.Field> _fields;
        private System.Collections.Generic.List<Gx.Records.RecordDescriptor> _recordDescriptors;
        /// <summary>
        ///  The language of the genealogical data.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        [Newtonsoft.Json.JsonProperty("lang")]
        public string Lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }
        /// <summary>
        ///  A reference to a description of this data set.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "description")]
        [Newtonsoft.Json.JsonProperty("description")]
        public string DescriptionRef
        {
            get
            {
                return this._descriptionRef;
            }
            set
            {
                this._descriptionRef = value;
            }
        }
        /// <summary>
        ///  A reference to the profile that describes this data set.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "profile")]
        [Newtonsoft.Json.JsonProperty("profile")]
        public string Profile
        {
            get
            {
                return this._profile;
            }
            set
            {
                this._profile = value;
            }
        }
        /// <summary>
        ///  The attribution of this genealogical data.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "attribution", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("attribution")]
        public Gx.Common.Attribution Attribution
        {
            get
            {
                return this._attribution;
            }
            set
            {
                this._attribution = value;
            }
        }
        /// <summary>
        ///  The persons included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "person", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("persons")]
        public System.Collections.Generic.List<Gx.Conclusion.Person> Persons
        {
            get
            {
                return this._persons ?? (_persons = new System.Collections.Generic.List<Gx.Conclusion.Person>());
            }
            set
            {
                this._persons = value;
            }
        }
        public bool ShouldSerializePersons() => AnyPersons();
        public bool AnyPersons()
        {
            return _persons?.Any() ?? false;
        }
        /// <summary>
        ///  The relationships included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "relationship", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("relationships")]
        public System.Collections.Generic.List<Gx.Conclusion.Relationship> Relationships
        {
            get
            {
                return this._relationships ?? (_relationships = new System.Collections.Generic.List<Gx.Conclusion.Relationship>());
            }
            set
            {
                this._relationships = value;
            }
        }
        public bool ShouldSerializeRelationships() => AnyRelationships();
        public bool AnyRelationships()
        {
            return _relationships?.Any() ?? false;
        }
        /// <summary>
        ///  The descriptions of sources included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "sourceDescription", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("sourceDescriptions")]
        public System.Collections.Generic.List<Gx.Source.SourceDescription> SourceDescriptions
        {
            get
            {
                return this._sourceDescriptions ?? (_sourceDescriptions = new System.Collections.Generic.List<Gx.Source.SourceDescription>());
            }
            set
            {
                this._sourceDescriptions = value;
            }
        }
        public bool ShouldSerializeSourceDescriptions() => AnySourceDescriptions();
        public bool AnySourceDescriptions()
        {
            return _sourceDescriptions?.Any() ?? false;
        }
        /// <summary>
        ///  The agents included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "agent", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("agents")]
        public System.Collections.Generic.List<Gx.Agent.Agent> Agents
        {
            get
            {
                return this._agents ?? (_agents = new System.Collections.Generic.List<Gx.Agent.Agent>());
            }
            set
            {
                this._agents = value;
            }
        }
        public bool ShouldSerializeAgents() => AnyAgents();
        public bool AnyAgents()
        {
            return _agents?.Any() ?? false;
        }
        /// <summary>
        ///  The events included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "event", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("events")]
        public System.Collections.Generic.List<Gx.Conclusion.Event> Events
        {
            get
            {
                return this._events ?? (_events = new System.Collections.Generic.List<Gx.Conclusion.Event>());
            }
            set
            {
                this._events = value;
            }
        }
        public bool ShouldSerializeEvents() => AnyEvents();
        public bool AnyEvents()
        {
            return _events?.Any() ?? false;
        }
        /// <summary>
        ///  The places included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "place", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("places")]
        public System.Collections.Generic.List<Gx.Conclusion.PlaceDescription> Places
        {
            get
            {
                return this._places ?? (_places = new System.Collections.Generic.List<Gx.Conclusion.PlaceDescription>());
            }
            set
            {
                this._places = value;
            }
        }
        public bool ShouldSerializePlaces() => AnyPlaces();
        public bool AnyPlaces()
        {
            return _places?.Any() ?? false;
        }
        /// <summary>
        ///  The documents included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "document", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("documents")]
        public System.Collections.Generic.List<Gx.Conclusion.Document> Documents
        {
            get
            {
                return this._documents ?? (_documents = new System.Collections.Generic.List<Gx.Conclusion.Document>());
            }
            set
            {
                this._documents = value;
            }
        }
        public bool ShouldSerializeDocuments() => AnyDocuments();
        public bool AnyDocuments()
        {
            return _documents?.Any() ?? false;
        }
        /// <summary>
        ///  The collections included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "collection", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("collections")]
        public System.Collections.Generic.List<Gx.Records.Collection> Collections
        {
            get
            {
                return this._collections ?? (_collections = new System.Collections.Generic.List<Gx.Records.Collection>());
            }
            set
            {
                this._collections = value;
            }
        }
        public bool ShouldSerializeCollections() => AnyCollections();
        public bool AnyCollections()
        {
            return _collections?.Any() ?? false;
        }
        /// <summary>
        ///  The extracted fields included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("fields")]
        public System.Collections.Generic.List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields ?? (_fields = new System.Collections.Generic.List<Gx.Records.Field>());
            }
            set
            {
                this._fields = value;
            }
        }
        public bool ShouldSerializeFields() => AnyFields();
        public bool AnyFields()
        {
            return _fields?.Any() ?? false;
        }
        /// <summary>
        ///  The record descriptors included in this genealogical data set.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "recordDescriptor", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("recordDescriptors")]
        public System.Collections.Generic.List<Gx.Records.RecordDescriptor> RecordDescriptors
        {
            get
            {
                return this._recordDescriptors ?? (_recordDescriptors = new System.Collections.Generic.List<Gx.Records.RecordDescriptor>());
            }
            set
            {
                this._recordDescriptors = value;
            }
        }
        public bool ShouldSerializeRecordDescriptors() => AnyRecordDescriptors();
        public bool AnyRecordDescriptors()
        {
            return _recordDescriptors?.Any() ?? false;
        }

        /// <summary>
        /// Add a person to the data set.
        /// </summary>
        /// <param name="person">The person to be added.</param>
        public Gedcomx AddPerson(Person person)
        {
            if (person != null)
            {
                Persons.Add(person);
            }
            return this;
        }

        /// <summary>
        /// Add a relationship to the data set.
        /// </summary>
        /// <param name="relationship">The relationship to be added.</param>
        public Gedcomx AddRelationship(Relationship relationship)
        {
            if (relationship != null)
            {
                Relationships.Add(relationship);
            }
            return this;
        }

        /// <summary>
        /// Add a source description to the data set.
        /// </summary>
        /// <param name="sourceDescription">The source description to be added.</param>
        public Gedcomx AddSourceDescription(SourceDescription sourceDescription)
        {
            if (sourceDescription != null)
            {
                SourceDescriptions.Add(sourceDescription);
            }
            return this;
        }

        /// <summary>
        /// Add a agent to the data set.
        /// </summary>
        /// <param name="agent">The agent to be added.</param>
        public Gedcomx AddAgent(Gx.Agent.Agent agent)
        {
            if (agent != null)
            {
                Agents.Add(agent);
            }
            return this;
        }

        /// <summary>
        /// Add a event to the data set.
        /// </summary>
        /// <param name="event">The event to be added.</param>
        public Gedcomx AddEvent(Event @event)
        {
            if (@event != null)
            {
                Events.Add(@event);
            }
            return this;
        }

        /// <summary>
        /// Add a place to the data set.
        /// </summary>
        /// <param name="place">The place to be added.</param>
        public Gedcomx AddPlace(PlaceDescription place)
        {
            if (place != null)
            {
                Places.Add(place);
            }
            return this;
        }

        /// <summary>
        /// Add a document to the data set.
        /// </summary>
        /// <param name="document">The document to be added.</param>
        public Gedcomx AddDocument(Document document)
        {
            if (document != null)
            {
                Documents.Add(document);
            }
            return this;
        }

        /// <summary>
        /// Add a collection to the data set.
        /// </summary>
        /// <param name="collection">The collection to be added.</param>
        public Gedcomx AddCollection(Collection collection)
        {
            if (collection != null)
            {
                Collections.Add(collection);
            }
            return this;
        }

        /// <summary>
        /// Add a field to the data set.
        /// </summary>
        /// <param name="field">The field to be added.</param>
        public Gedcomx AddField(Field field)
        {
            if (field != null)
            {
                Fields.Add(field);
            }
            return this;
        }

        /// <summary>
        /// Add a recordDescriptor to the data set.
        /// </summary>
        /// <param name="recordDescriptor">The recordDescriptor to be added.</param>
        public Gedcomx AddRecordDescriptor(RecordDescriptor recordDescriptor)
        {
            if (recordDescriptor != null)
            {
                RecordDescriptors.Add(recordDescriptor);
            }
            return this;
        }

        public virtual void Embed(Gedcomx gedcomx)
        {
            if (gedcomx.AnyLinks())
            {
                List<Link> links = gedcomx.Links;
                foreach (Link link in links)
                {
                    bool found = false;
                    if (link.Rel != null)
                    {
                        if (AnyLinks())
                        {
                            foreach (Link target in Links)
                            {
                                if (link.Rel.Equals(target.Rel))
                                {
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        Links.Add(link);
                    }
                }
            }

            if (gedcomx.AnyPersons())
            {
                List<Person> persons = gedcomx.Persons;
                foreach (Person person in persons)
                {
                    bool found = false;
                    if (person.Id != null)
                    {
                        if (AnyPersons())
                        {
                            foreach (Person target in Persons)
                            {
                                if (person.Id.Equals(target.Id))
                                {
                                    target.Embed(person);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddPerson(person);
                    }
                }
            }

            if (gedcomx.AnyRelationships())
            {
                List<Relationship> relationships = gedcomx.Relationships;
                foreach (Relationship relationship in relationships)
                {
                    bool found = false;
                    if (relationship.Id != null)
                    {
                        if (AnyRelationships())
                        {
                            foreach (Relationship target in Relationships)
                            {
                                if (relationship.Id.Equals(target.Id))
                                {
                                    target.Embed(relationship);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddRelationship(relationship);
                    }
                }
            }

            if (gedcomx.AnySourceDescriptions())
            {
                List<SourceDescription> sourceDescriptions = gedcomx.SourceDescriptions;
                foreach (SourceDescription sourceDescription in sourceDescriptions)
                {
                    bool found = false;
                    if (sourceDescription.Id != null)
                    {
                        if (AnySourceDescriptions())
                        {
                            foreach (SourceDescription target in SourceDescriptions)
                            {
                                if (sourceDescription.Id.Equals(target.Id))
                                {
                                    target.Embed(sourceDescription);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddSourceDescription(sourceDescription);
                    }
                }
            }

            if (gedcomx.AnyAgents())
            {
                List<Gx.Agent.Agent> agents = gedcomx.Agents;
                foreach (Gx.Agent.Agent agent in agents)
                {
                    bool found = false;
                    if (agent.Id != null)
                    {
                        if (AnyAgents())
                        {
                            foreach (Gx.Agent.Agent target in Agents)
                            {
                                if (agent.Id.Equals(target.Id))
                                {
                                    target.Embed(agent);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddAgent(agent);
                    }
                }
            }

            if (gedcomx.AnyEvents())
            {
                List<Event> events = gedcomx.Events;
                foreach (Event @event in events)
                {
                    bool found = false;
                    if (@event.Id != null)
                    {
                        if (AnyEvents())
                        {
                            foreach (Event target in Events)
                            {
                                if (@event.Id.Equals(target.Id))
                                {
                                    target.Embed(@event);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddEvent(@event);
                    }
                }
            }

            if (gedcomx.AnyPlaces())
            {
                List<PlaceDescription> placeDescriptions = gedcomx.Places;
                foreach (PlaceDescription placeDescription in placeDescriptions)
                {
                    bool found = false;
                    if (placeDescription.Id != null)
                    {
                        if (AnyPlaces())
                        {
                            foreach (PlaceDescription target in Places)
                            {
                                if (placeDescription.Id.Equals(target.Id))
                                {
                                    target.Embed(placeDescription);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddPlace(placeDescription);
                    }
                }
            }

            if (gedcomx.AnyDocuments())
            {
                List<Document> documents = gedcomx.Documents;
                foreach (Document document in documents)
                {
                    bool found = false;
                    if (document.Id != null)
                    {
                        if (AnyDocuments())
                        {
                            foreach (Document target in Documents)
                            {
                                if (document.Id.Equals(target.Id))
                                {
                                    target.Embed(document);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddDocument(document);
                    }
                }
            }

            if (gedcomx.AnyCollections())
            {
                List<Collection> collections = gedcomx.Collections;
                foreach (Collection collection in collections)
                {
                    bool found = false;
                    if (collection.Id != null)
                    {
                        if (AnyCollections())
                        {
                            foreach (Collection target in Collections)
                            {
                                if (collection.Id.Equals(target.Id))
                                {
                                    target.Embed(collection);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddCollection(collection);
                    }
                }
            }

            if (gedcomx.AnyFields())
            {
                List<Field> fields = gedcomx.Fields;
                foreach (Field field in fields)
                {
                    bool found = false;
                    if (field.Id != null)
                    {
                        if (AnyFields())
                        {
                            foreach (Field target in Fields)
                            {
                                if (field.Id.Equals(target.Id))
                                {
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddField(field);
                    }
                }
            }

            if (gedcomx.AnyRecordDescriptors())
            {
                List<RecordDescriptor> recordDescriptors = gedcomx.RecordDescriptors;
                foreach (RecordDescriptor recordDescriptor in recordDescriptors)
                {
                    bool found = false;
                    if (recordDescriptor.Id != null)
                    {
                        if (AnyRecordDescriptors())
                        {
                            foreach (RecordDescriptor target in RecordDescriptors)
                            {
                                if (recordDescriptor.Id.Equals(target.Id))
                                {
                                    target.Embed(recordDescriptor);
                                    found = true;
                                    break;
                                }
                            }
                        }
                    }

                    if (!found)
                    {
                        AddRecordDescriptor(recordDescriptor);
                    }
                }
            }
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitGedcomx(this);
        }

        /**
         * Build out this envelope with a lang.
         * 
         * @param lang The lang.
         * @return this.
         */
        public Gedcomx SetLang(String lang)
        {
            Lang = lang;
            return this;
        }

        /**
         * Build out this with a description ref.
         * 
         * @param descriptionRef The description ref.
         * @return this.
         */
        public Gedcomx SetDescriptionRef(String descriptionRef)
        {
            DescriptionRef = descriptionRef;
            return this;
        }

        /**
         * Build this out with an attribution.
         * @param attribution The attribution.
         * @return this.
         */
        public Gedcomx SetAttribution(Attribution attribution)
        {
            Attribution = attribution;
            return this;
        }
    }
}
