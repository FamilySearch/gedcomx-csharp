// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Linq;

using Gedcomx.Model.Rt;
using Gedcomx.Model.Util;

using Gx.Records;
using Gx.Types;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A gender conclusion.
    /// </remarks>
    /// <summary>
    ///  A gender conclusion.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Gender")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://gedcomx.org/v1/", ElementName = "gender")]
    public partial class Gender : Gx.Conclusion.Conclusion
    {
        private string _type;
        private System.Collections.Generic.List<Gx.Records.Field> _fields;

        public Gender()
        {
        }

        public Gender(GenderType type)
        {
            KnownType = type;
        }

        /// <summary>
        ///  The type of the gender.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "type")]
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        /// <summary>
        ///  Convenience property for treating Type as an enum. See Gx.Types.GenderTypeQNameUtil for details on getter/setter functionality.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [Newtonsoft.Json.JsonIgnore]
        public Gx.Types.GenderType KnownType
        {
            get
            {
                return XmlQNameEnumUtil.GetEnumValue<GenderType>(this._type);
            }
            set
            {
                this._type = XmlQNameEnumUtil.GetNameValue(value);
            }
        }
        /// <summary>
        ///  The references to the record fields being used as evidence.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("fields")]
        public System.Collections.Generic.List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields ?? (_fields = new System.Collections.Generic.List<Gx.Records.Field>());
            }
            set
            {
                this._fields = value;
            }
        }
        public bool ShouldSerializeFields() => AnyFields();
        public bool AnyFields()
        {
            return _fields?.Any() ?? false;
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitGender(this);
        }

        /**
         * Build up this gender with a type.
         *
         * @param type The type.
         * @return this.
         */
        public Gender SetType(String type)
        {
            Type = type;
            return this;
        }

        /**
         * Build up this gender with a type.
         *
         * @param type The type.
         * @return this.
         */
        public Gender SetType(GenderType type)
        {
            KnownType = type;
            return this;
        }

        /**
         * Build up this gender with a field.
         *
         * @param field The field.
         * @return this.
         */
        public Gender SetField(Field field)
        {
            if (field != null)
            {
                Fields.Add(field);
            }
            return this;
        }
    }
}
