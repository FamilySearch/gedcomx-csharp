using Gedcomx.Model;
using Gedcomx.Model.Util;
using Newtonsoft.Json;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Xml.Serialization;
using System.Collections.Generic;
using System.Linq;

namespace Gx.Links
{

    /// <remarks>
    ///  An data type that supports hypermedia controls (i.e. links).
    /// </remarks>
    /// <summary>
    ///  An data type that supports hypermedia controls (i.e. links).
    /// </summary>
    [Serializable]
    [XmlType(Namespace = "http://gedcomx.org/v1/", TypeName = "HypermediaEnabledData")]
    public abstract partial class HypermediaEnabledData : Gx.Common.ExtensibleData, ISupportsLinks
    {

        private List<Gx.Links.Link> _links;
        /// <summary>
        ///  The list of hypermedia links. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "link", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("links")]
        [JsonConverter(typeof(JsonHypermediaLinksConverter))]
        public List<Gx.Links.Link> Links
        {
            get
            {
                return this._links;
            }
            set
            {
                this._links = value;
            }
        }

        /// <summary>
        /// Add a hypermedia link. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        /// <param name="link">The hypermedia link. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.</param>
        public void AddLink(Link link)
        {
            if (this._links == null)
            {
                _links = new List<Link>();
            }

            this._links.Add(link);
        }

        /// <summary>
        /// Add a hypermedia link.
        /// </summary>
        /// <param name="rel">The link rel.</param>
        /// <param name="href">The target URI.</param>
        public void AddLink(String rel, Uri href)
        {
            AddLink(new Link(rel, href.ToString()));
        }

        /// <summary>
        /// Add a templated link.
        /// </summary>
        /// <param name="rel">The link rel.</param>
        /// <param name="template">The link template.</param>
        public void AddTemplatedLink(String rel, String template)
        {
            Link link = new Link();
            link.Rel = rel;
            link.Template = template;
            AddLink(link);
        }

        /// <summary>
        /// Get a link by its rel. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        /// <param name="rel">The link rel.</param>
        /// <returns>
        /// The link by rel.
        /// </returns>
        public Link GetLink(string rel)
        {
            return GetLinks(rel).FirstOrDefault();
        }

        /// <summary>
        /// Get a list of links by rel. Links are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        /// <param name="rel">The links by rel.</param>
        /// <returns></returns>
        public List<Link> GetLinks(string rel)
        {
            return this.Links.Where(x => x.Rel == rel).ToList();
        }

        /**
         * Build up this data with a link.
         *
         * @param link The link.
         * @return this.
         */
        public HypermediaEnabledData SetLink(Link link)
        {
            AddLink(link);
            return this;
        }

        /**
         * Build up this data with a link.
         *
         * @param rel The rel.
         * @param href The href.
         * @return this.
         */
        public HypermediaEnabledData SetLink(String rel, Uri href)
        {
            AddLink(rel, href);
            return this;
        }

    }
}
