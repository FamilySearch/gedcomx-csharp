using Gedcomx.Model.Rt;
using Gedcomx.Model.Util;
using Gx.Common;
using Gx.Records;
using Gx.Types;
// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Xml.Serialization;
using System.Collections.Generic;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A part of a name.
    /// </remarks>
    /// <summary>
    ///  A part of a name.
    /// </summary>
    [Serializable]
    [XmlType(Namespace = "http://gedcomx.org/v1/", TypeName = "NamePart")]
    public sealed partial class NamePart : Gx.Common.ExtensibleData
    {

        private string _value;
        private string _type;
        private List<Gx.Records.Field> _fields;
        private List<Gx.Common.Qualifier> _qualifiers;

        public NamePart()
            : this(default(NamePartType), null)
        {
        }

        public NamePart(NamePartType type, String text)
        {
            if (type != NamePartType.NULL)
            {
                KnownType = type;
            }
            Value = text;
        }

        /// <summary>
        ///  The value of the name part.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "value")]
        [Newtonsoft.Json.JsonProperty("value")]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }
        /// <summary>
        ///  The type of the name part.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "type")]
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        /// <summary>
        ///  Convenience property for treating Type as an enum. See Gx.Types.NamePartTypeQNameUtil for details on getter/setter functionality.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [Newtonsoft.Json.JsonIgnore]
        public Gx.Types.NamePartType KnownType
        {
            get
            {
                return XmlQNameEnumUtil.GetEnumValue<NamePartType>(this._type);
            }
            set
            {
                this._type = XmlQNameEnumUtil.GetNameValue(value);
            }
        }
        /// <summary>
        ///  The references to the record fields being used as evidence.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("fields")]
        public List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields;
            }
            set
            {
                this._fields = value;
            }
        }
        /// <summary>
        ///  The qualifiers associated with this name part.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "qualifier", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("qualifiers")]
        public List<Gx.Common.Qualifier> Qualifiers
        {
            get
            {
                return this._qualifiers;
            }
            set
            {
                this._qualifiers = value;
            }
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitNamePart(this);
        }

        /**
         * Build out this name part with a type.
         *
         * @param type The type.
         * @return this.
         */
        public NamePart SetType(String type)
        {
            Type = type;
            return this;
        }

        /**
         * Build out this name part with a type.
         *
         * @param type The type.
         * @return this.
         */
        public NamePart SetType(NamePartType type)
        {
            KnownType = type;
            return this;
        }

        /**
         * Build out this name part with a value.
         *
         * @param value The value.
         * @return this.
         */
        public NamePart SetValue(String value)
        {
            Value = value;
            return this;
        }

        /**
         * Build out this name part with a qualifier.
         *
         * @param qualifier The qualifier.
         * @return this.
         */
        public NamePart SetQualifier(Qualifier qualifier)
        {
            AddQualifier(qualifier);
            return this;
        }

        /**
         * Build out this name part with a field.
         * @param field The field.
         * @return this.
         */
        public NamePart SetField(Field field)
        {
            AddField(field);
            return this;
        }

        /**
         * Add a qualifier associated with this name part.
         *
         * @param qualifier The qualifier to be added.
         */
        public void AddQualifier(Qualifier qualifier)
        {
            if (qualifier != null)
            {
                if (_qualifiers == null)
                {
                    _qualifiers = new List<Qualifier>();
                }
                _qualifiers.Add(qualifier);
            }
        }

        /**
         * Add a reference to the record field values being used as evidence.
         *
         * @param field The field to be added.
         */
        public void AddField(Field field)
        {
            if (field != null)
            {
                if (_fields == null)
                {
                    _fields = new List<Field>();
                }

                _fields.Add(field);
            }
        }
    }
}
