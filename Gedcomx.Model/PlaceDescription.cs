// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Collections.Generic;
using System.Linq;

using Gedcomx.Model.Rt;

using Gx.Common;
using Gx.Model.Collections;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A PlaceDescription is used to describe the details of a place in terms of its name
    ///  and possibly its type, time period, and/or a geospatial description -- a description
    ///  of a place as a snapshot in time.
    /// </remarks>
    /// <summary>
    ///  A PlaceDescription is used to describe the details of a place in terms of its name
    ///  and possibly its type, time period, and/or a geospatial description -- a description
    ///  of a place as a snapshot in time.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "PlaceDescription")]
    public partial class PlaceDescription : Gx.Conclusion.Subject
    {

        private string _type;
        private TextValues _names;
        private Gx.Conclusion.DateInfo _temporalDescription;
        private double? _latitude;
        private bool _latitudeSpecified;
        private double? _longitude;
        private bool _longitudeSpecified;
        private Gx.Common.ResourceReference _spatialDescription;
        private Gx.Common.ResourceReference _place;
        private Gx.Common.ResourceReference _jurisdiction;
        private Gx.Conclusion.PlaceDisplayProperties _displayExtension;
        /// <summary>
        ///  An implementation-specific uniform resource identifier (URI) used to identify the type of a place (e.g., address, city, county, province, state, country, etc.).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "type")]
        [Newtonsoft.Json.JsonProperty("type")]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }
        /// <summary>
        ///  An ordered list of standardized (or normalized), fully-qualified (in terms of what is known of the applicable jurisdictional hierarchy) names for this place that are applicable to this description of this place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "name", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("names")]
        public TextValues Names
        {
            get
            {
                return this._names ?? (_names = new TextValues());
            }
            set
            {
                this._names = value;
            }
        }
        public bool ShouldSerializeNames() => AnyNames();
        public bool AnyNames()
        {
            return _names?.Any() ?? false;
        }
        /// <summary>
        ///  A description of the time period to which this place description is relevant.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "temporalDescription", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("temporalDescription")]
        public Gx.Conclusion.DateInfo TemporalDescription
        {
            get
            {
                return this._temporalDescription;
            }
            set
            {
                this._temporalDescription = value;
            }
        }
        /// <summary>
        ///  Degrees north or south of the Equator.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "latitude", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("latitude")]
        public double Latitude
        {
            get
            {
                return this._latitude.GetValueOrDefault();
            }
            set
            {
                this._latitude = value;
                this._latitudeSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Latitude" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnore]
        public bool LatitudeSpecified
        {
            get
            {
                return this._latitudeSpecified;
            }
            set
            {
                this._latitudeSpecified = value;
            }
        }

        /// <summary>
        ///  Angular distance in degrees, relative to the Prime Meridian.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "longitude", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("longitude")]
        public double Longitude
        {
            get
            {
                return this._longitude.GetValueOrDefault();
            }
            set
            {
                this._longitude = value;
                this._longitudeSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Longitude" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnore]
        public bool LongitudeSpecified
        {
            get
            {
                return this._longitudeSpecified;
            }
            set
            {
                this._longitudeSpecified = value;
            }
        }

        /// <summary>
        ///  A reference to a geospatial description of this place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "spatialDescription", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("spatialDescription")]
        public Gx.Common.ResourceReference SpatialDescription
        {
            get
            {
                return this._spatialDescription;
            }
            set
            {
                this._spatialDescription = value;
            }
        }
        /// <summary>
        ///  A reference to the place being described.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "place", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("place")]
        public Gx.Common.ResourceReference Place
        {
            get
            {
                return this._place;
            }
            set
            {
                this._place = value;
            }
        }
        /// <summary>
        ///  A reference to a description of the jurisdiction this place.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "jurisdiction", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("jurisdiction")]
        public Gx.Common.ResourceReference Jurisdiction
        {
            get
            {
                return this._jurisdiction;
            }
            set
            {
                this._jurisdiction = value;
            }
        }
        /// <summary>
        ///  Display properties for the place. Display properties are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "display", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("display")]
        public Gx.Conclusion.PlaceDisplayProperties DisplayExtension
        {
            get
            {
                return this._displayExtension;
            }
            set
            {
                this._displayExtension = value;
            }
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitPlaceDescription(this);
        }

        /**
         * Build out this place description with a type.
         * @param type The type.
         * @return this.
         */
        public PlaceDescription SetType(String type)
        {
            Type = type;
            return this;
        }

        /**
         * Build out this description with a name.
         *
         * @param name The name.
         * @return this.
         */
        public PlaceDescription AddName(TextValue name)
        {
            if (name != null)
            {
                Names.Add(name);
            }
            return this;
        }

        /**
         * Build out this description with a name.
         *
         * @param name The name.
         * @return this.
         */
        public PlaceDescription AddName(String name)
        {
            AddName(new TextValue(name));
            return this;
        }

        /**
         * Build out this place description with a temporal description.
         * @param temporalDescription the temporal description.
         * @return this.
         */
        public PlaceDescription SetTemporalDescription(DateInfo temporalDescription)
        {
            TemporalDescription = temporalDescription;
            return this;
        }

        /**
         * Build out this place description with a latitude.
         *
         * @param latitude The latitude.
         * @return this.
         */
        public PlaceDescription SetLatitude(Double latitude)
        {
            Latitude = latitude;
            return this;
        }

        /**
         * Build out this place description with a longitude.
         * @param longitude The longitude.
         * @return this.
         */
        public PlaceDescription SetLongitude(Double longitude)
        {
            Longitude = longitude;
            return this;
        }

        /**
         * Build out this place description with a spacial description.
         * @param spatialDescription The spatial description.
         * @return this
         */
        public PlaceDescription SetSpatialDescription(ResourceReference spatialDescription)
        {
            SpatialDescription = spatialDescription;
            return this;
        }

        /**
         * Build out this place description with a jurisdiction.
         * @param jurisdiction The reference to the jurisdiction.
         * @return this
         */
        public PlaceDescription SetJurisdiction(ResourceReference jurisdiction)
        {
            Jurisdiction = jurisdiction;
            return this;
        }

        /**
         * Build out this place description with a place.
         *
         * @param place The reference to the place.
         * @return this
         */
        public PlaceDescription SetPlace(ResourceReference place)
        {
            Place = place;
            return this;
        }

        /**
         * Build out this place with a display exension.
         *
         * @param display the display.
         * @return this
         */
        public PlaceDescription SetDisplayExtension(PlaceDisplayProperties display)
        {
            DisplayExtension = display;
            return this;
        }
    }
}
