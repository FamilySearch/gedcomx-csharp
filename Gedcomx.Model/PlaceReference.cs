// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Linq;

using Gedcomx.Model.Rt;

using Gx.Records;
using Gx.Source;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  A reference to genealogical place.
    /// </remarks>
    /// <summary>
    ///  A reference to genealogical place.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "PlaceReference")]
    public partial class PlaceReference : Gx.Common.ExtensibleData
    {
        /// <summary>
        /// Build up this source reference with a <see cref="PlaceDescription"/> reference.
        /// </summary>
        /// <param name="description">The place description being referenced.</param>
        public static implicit operator PlaceReference(PlaceDescription description)
        {
            return new PlaceReference().SetDescription(description);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceReference"/> class.
        /// </summary>
        public PlaceReference()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlaceReference"/> class.
        /// </summary>
        /// /// <param name="description">The reference to the place description.</param>
        public PlaceReference(PlaceDescription description)
        {
            SetDescription(description);
        }

        private string _descriptionRef;
        private string _original;
        private System.Collections.Generic.List<Gx.Common.TextValue> _normalizedExtensions;
        private System.Collections.Generic.List<Gx.Records.Field> _fields;
        /// <summary>
        ///  A reference to a description of the place being referenced.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "description")]
        [Newtonsoft.Json.JsonProperty("description")]
        public string DescriptionRef
        {
            get
            {
                return this._descriptionRef;
            }
            set
            {
                this._descriptionRef = value;
            }
        }
        /// <summary>
        ///  The original value as supplied by the user.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "original", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("original")]
        public string Original
        {
            get
            {
                return this._original;
            }
            set
            {
                this._original = value;
            }
        }
        /// <summary>
        ///  The list of normalized values for the place, provided for display purposes by the application. Normalized values
        ///  are not specified by GEDCOM X core, but as extension elements by GEDCOM X RS.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "normalized", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("normalized")]
        public System.Collections.Generic.List<Gx.Common.TextValue> NormalizedExtensions
        {
            get
            {
                return this._normalizedExtensions ?? (_normalizedExtensions = new System.Collections.Generic.List<Gx.Common.TextValue>());
            }
            set
            {
                this._normalizedExtensions = value;
            }
        }
        public bool ShouldSerializeNormalizedExtensions() => AnyNormalizedExtensions();
        public bool AnyNormalizedExtensions()
        {
            return _normalizedExtensions?.Any() ?? false;
        }
        /// <summary>
        ///  The references to the record fields being used as evidence.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "field", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("fields")]
        public System.Collections.Generic.List<Gx.Records.Field> Fields
        {
            get
            {
                return this._fields ?? (_fields = new System.Collections.Generic.List<Gx.Records.Field>());
            }
            set
            {
                this._fields = value;
            }
        }
        public bool ShouldSerializeFields() => AnyFields();
        public bool AnyFields()
        {
            return _fields?.Any() ?? false;
        }

        /**
         * Accept a visitor.
         *
         * @param visitor The visitor.
         */
        public void Accept(IGedcomxModelVisitor visitor)
        {
            visitor.VisitPlaceReference(this);
        }

        /**
         * Build out this place reference with an original string.
         * 
         * @param original The original string.
         * @return this.
         */
        public PlaceReference SetOriginal(String original)
        {
            Original = original;
            return this;
        }

        /**
         * Build out this place reference with a reference to a place description.
         *
         * @param description The reference to the place description.
         * @return this.
         */
        public PlaceReference SetDescription(PlaceDescription description)
        {
            DescriptionRef = "#" + description.Id;
            return this;
        }

        /**
         * Build out this place reference with a reference to a place description.
         *
         * @param ref The reference to the place description.
         * @return this.
         */
        public PlaceReference SetDescription(String @ref)
        {
            DescriptionRef = @ref;
            return this;
        }

        /**
         * Build out this place reference with an normalized string.
         *
         * @param normalized The normalized string.
         * @return this.
         */
        public PlaceReference SetNormalized(String normalized)
        {
            Original = normalized;
            return this;
        }

        /**
         * Build out this place reference with a field.
         *
         * @param field The field.
         * @return this.
         */
        public PlaceReference SetField(Field field)
        {
            if (field != null)
            {
                Fields.Add(field);
            }
            return this;
        }
    }
}
