// <auto-generated>
// 
//
// Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
// </auto-generated>
using System;
using System.Linq;

using Gedcomx.Model.Util;

using Gx.Common;
using Gx.Source;

using Newtonsoft.Json;

namespace Gx.Conclusion
{

    /// <remarks>
    ///  The <tt>Subject</tt> data type defines the abstract concept of a genealogical <em>subject</em>. A <em>subject</em> is something with a unique and
    ///  intrinsic identity, e.g., a person, a location on the surface of the earth. We identify that <em>subject</em> in time and space using various supporting
    ///  <em>conclusions</em>, e.g. for a person: things like name, birth date, age, address, etc. We aggregate these supporting <em>conclusions</em> to form an
    ///  apparently-unique identity by which we can distinguish our <em>subject</em> from all other possible <em>subjects</em>.
    /// </remarks>
    /// <summary>
    ///  The <tt>Subject</tt> data type defines the abstract concept of a genealogical <em>subject</em>. A <em>subject</em> is something with a unique and
    ///  intrinsic identity, e.g., a person, a location on the surface of the earth. We identify that <em>subject</em> in time and space using various supporting
    ///  <em>conclusions</em>, e.g. for a person: things like name, birth date, age, address, etc. We aggregate these supporting <em>conclusions</em> to form an
    ///  apparently-unique identity by which we can distinguish our <em>subject</em> from all other possible <em>subjects</em>.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://gedcomx.org/v1/", TypeName = "Subject")]
    public abstract partial class Subject : Gx.Conclusion.Conclusion, IAttributable
    {

        private bool? _extracted;
        private bool _extractedSpecified;
        private System.Collections.Generic.List<Gx.Common.EvidenceReference> _evidence;
        private System.Collections.Generic.List<Gx.Source.SourceReference> _media;
        private System.Collections.Generic.List<Gx.Conclusion.Identifier> _identifiers;
        /// <summary>
        ///  Whether this subject has been identified as "extracted".
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(AttributeName = "extracted")]
        [Newtonsoft.Json.JsonProperty("extracted")]
        public bool Extracted
        {
            get
            {
                return this._extracted.GetValueOrDefault();
            }
            set
            {
                this._extracted = value;
                this._extractedSpecified = true;
            }
        }

        /// <summary>
        ///  Property for the XML serializer indicating whether the "Extracted" property should be included in the output.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        [Newtonsoft.Json.JsonIgnore]
        public bool ExtractedSpecified
        {
            get
            {
                return this._extractedSpecified;
            }
            set
            {
                this._extractedSpecified = value;
            }
        }

        /// <summary>
        ///  References to the evidence being referenced.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "evidence", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("evidence")]
        public System.Collections.Generic.List<Gx.Common.EvidenceReference> Evidence
        {
            get
            {
                return this._evidence ?? (_evidence = new System.Collections.Generic.List<Gx.Common.EvidenceReference>());
            }
            set
            {
                this._evidence = value;
            }
        }
        public bool ShouldSerializeEvidence() => AnyEvidence();
        public bool AnyEvidence()
        {
            return _evidence?.Any() ?? false;
        }
        /// <summary>
        ///  References to multimedia resources associated with this subject.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "media", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("media")]
        public System.Collections.Generic.List<Gx.Source.SourceReference> Media
        {
            get
            {
                return this._media ?? (_media = new System.Collections.Generic.List<Gx.Source.SourceReference>());
            }
            set
            {
                this._media = value;
            }
        }
        public bool ShouldSerializeMedia() => AnyMedia();
        public bool AnyMedia()
        {
            return _media?.Any() ?? false;
        }
        /// <summary>
        ///  The list of identifiers for the subject.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(ElementName = "identifier", Namespace = "http://gedcomx.org/v1/")]
        [Newtonsoft.Json.JsonProperty("identifiers")]
        [JsonConverter(typeof(JsonIdentifiersConverter))]
        public System.Collections.Generic.List<Gx.Conclusion.Identifier> Identifiers
        {
            get
            {
                return this._identifiers ?? (_identifiers = new System.Collections.Generic.List<Gx.Conclusion.Identifier>());
            }
            set
            {
                this._identifiers = value;
            }
        }
        public bool ShouldSerializeIdentifiers() => AnyIdentifiers();
        public bool AnyIdentifiers()
        {
            return _identifiers?.Any() ?? false;
        }

        protected internal override void Embed(ExtensibleData subject)
        {
            var value = (Subject)subject;
            this._extracted = this._extracted == null ? value._extracted : this._extracted;

            if (value._identifiers != null)
            {
                this.Identifiers.AddRange(value._identifiers);
            }
            if (value._media != null)
            {
                this.Media.AddRange(value._media);
            }
            if (value._evidence != null)
            {
                this.Evidence.AddRange(value._evidence);
            }

            base.Embed(subject);
        }

        /**
         * Build up this subject with an extracted flag.
         *
         * @param extracted The extracted flag.
         * @return this.
         */
        public Subject SetExtracted(Boolean extracted)
        {
            Extracted = extracted;
            return this;
        }

        /**
         * Build up this subject with an identifier.
         *
         * @param identifier The identifier.
         * @return this.
         */
        public Subject SetIdentifier(Identifier identifier)
        {
            Identifiers.Add(identifier);
            return this;
        }

        /**
         * Add an evidence reference for this subject.
         *
         * @param evidence The evidence reference.
         * @return this.
         */
        public Subject SetEvidence(EvidenceReference evidence)
        {
            if (evidence != null)
            {
                Evidence.Add(evidence);
            }
            return this;
        }

        /**
         * Build up this subject with a media reference.
         *
         * @param media The media reference.
         * @return this.
         */
        public Subject SetMedia(SourceReference media)
        {
            if (media != null)
            {
                Media.Add(media);
            }
            return this;
        }
    }
}
